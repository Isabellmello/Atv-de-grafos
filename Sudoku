def toGrid(n):
    return (n // 9, n % 9)

def toV(g):
    return g[0] * 9 + g[1]

def conect(v1, v2):
    g1 = toGrid(v1)
    g2 = toGrid(v2)
    if g1[0] == g2[0] or g1[1] == g2[1]:
        return True
    if g1[0] // 3 == g2[0] // 3 and g1[1] // 3 == g2[1] // 3:
        return True
    return False

V = [i for i in range(81)]
L = {i: [] for i in range(81)}
for i in range(80):
    for j in range(i + 1, 81):
        if conect(i, j):
            L[i].append(j)
            L[j].append(i)

cor = [0] * 81
entrada = [
    ((0, 3), 7), ((0, 4), 9), ((0, 5), 8), ((0, 7), 4), ((0, 8), 2),
    ((1, 1), 7), ((1, 2), 8), ((1, 6), 6), ((1, 8), 3),
    ((2, 0), 1), ((2, 1), 4), ((2, 4), 6), ((2, 5), 3), ((2, 7), 7), ((2, 8), 8),
    ((3, 0), 5), ((3, 1), 6), ((3, 2), 4), ((3, 4), 8), ((3, 7), 3), ((3, 8), 1),
    ((4, 0), 8), ((4, 4), 2), ((4, 5), 1), ((4, 6), 5), ((4, 8), 4),
    ((5, 3), 6), ((5, 5), 4), ((5, 7), 9),
    ((6, 0), 3), ((6, 2), 5), ((6, 3), 2), ((6, 6), 7),
    ((7, 0), 4), ((7, 2), 6), ((7, 3), 8), ((7, 4), 7), ((7, 5), 9), ((7, 7), 1),
    ((8, 0), 7), ((8, 1), 8), ((8, 3), 1), ((8, 4), 3), ((8, 6), 4), ((8, 7), 2), ((8, 8), 6)
]
for pos, val in entrada:
    cor[toV(pos)] = val

def algoritmo_guloso(cor, L):
    for v in range(81):
        if cor[v] == 0:
            vizinho_cores = set(cor[n] for n in L[v] if cor[n] != 0)
            for cor_possivel in range(1, 10):
                if cor_possivel not in vizinho_cores:
                    cor[v] = cor_possivel
                    break
    return cor

cor = algoritmo_guloso(cor, L)

def printSudoku(cor):
    for i in range(9):
        print("+-" * 9 + "+")
        linha = ""
        for j in range(9):
            linha += "|" + (str(cor[toV((i, j))]) if cor[toV((i, j))] > 0 else " ")
        print(linha + "|")
    print("+-" * 9 + "+")
    
printSudoku(cor) 
